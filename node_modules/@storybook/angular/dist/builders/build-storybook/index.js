"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const architect_1 = require("@angular-devkit/architect");
const find_up_1 = require("find-up");
const read_pkg_up_1 = require("read-pkg-up");
const core_common_1 = require("@storybook/core-common");
const telemetry_1 = require("@storybook/telemetry");
const core_server_1 = require("@storybook/core-server");
const run_compodoc_1 = require("../utils/run-compodoc");
const error_handler_1 = require("../utils/error-handler");
const setup_1 = require("../utils/setup");
(0, telemetry_1.addToGlobalContext)('cliVersion', core_common_1.versions.storybook);
const commandBuilder = async (options, context) => {
    const { tsConfig, angularBuilderContext, angularBuilderOptions } = await (0, setup_1.setup)(options, context);
    const docTSConfig = (0, find_up_1.sync)('tsconfig.doc.json', { cwd: options.configDir });
    if (options.compodoc) {
        await (0, run_compodoc_1.runCompodoc)({ compodocArgs: options.compodocArgs, tsconfig: docTSConfig ?? tsConfig }, context);
    }
    (0, core_common_1.getEnvConfig)(options, {
        staticDir: 'SBCONFIG_STATIC_DIR',
        outputDir: 'SBCONFIG_OUTPUT_DIR',
        configDir: 'SBCONFIG_CONFIG_DIR',
    });
    const { configDir, docs, loglevel, test, outputDir, quiet, enableProdMode = true, webpackStatsJson, statsJson, debugWebpack, disableTelemetry, previewUrl, } = options;
    const standaloneOptions = {
        packageJson: (0, read_pkg_up_1.sync)({ cwd: __dirname }).packageJson,
        configDir,
        ...(docs ? { docs } : {}),
        excludeChunks: angularBuilderOptions.styles
            ?.filter((style) => typeof style !== 'string' && style.inject === false)
            .map((s) => s.bundleName),
        loglevel,
        outputDir,
        test,
        quiet,
        enableProdMode,
        disableTelemetry,
        angularBrowserTarget: options.browserTarget,
        angularBuilderContext,
        angularBuilderOptions,
        tsConfig,
        webpackStatsJson,
        statsJson,
        debugWebpack,
        previewUrl,
    };
    await runInstance({ ...standaloneOptions, mode: 'static' });
    return { success: true };
};
exports.default = (0, architect_1.createBuilder)(commandBuilder);
async function runInstance(options) {
    try {
        await (0, core_server_1.withTelemetry)('build', {
            cliOptions: options,
            presetOptions: { ...options, corePresets: [], overridePresets: [] },
            printError: error_handler_1.printErrorDetails,
        }, () => (0, core_server_1.buildStaticStandalone)(options));
    }
    catch (error) {
        throw new Error((0, error_handler_1.errorSummary)(error));
    }
}
