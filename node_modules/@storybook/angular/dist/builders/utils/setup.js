"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = void 0;
const architect_1 = require("@angular-devkit/architect");
const core_1 = require("@angular-devkit/core");
const find_up_1 = require("find-up");
const node_logger_1 = require("@storybook/node-logger");
async function setup(options, context) {
    let browserOptions;
    let browserTarget;
    if (options.browserTarget) {
        browserTarget = (0, architect_1.targetFromTargetString)(options.browserTarget);
        browserOptions = await context.validateOptions(await context.getTargetOptions(browserTarget), await context.getBuilderNameForTarget(browserTarget));
    }
    const tsConfig = options.tsConfig ??
        (0, find_up_1.sync)('tsconfig.json', { cwd: options.configDir }) ??
        browserOptions.tsConfig;
    const angularBuilderContext = getBuilderContext(context);
    const angularBuilderOptions = await getBuilderOptions(options.browserTarget, {
        ...(options.stylePreprocessorOptions
            ? { stylePreprocessorOptions: options.stylePreprocessorOptions }
            : {}),
        ...(options.styles ? { styles: options.styles } : {}),
        ...(options.assets ? { assets: options.assets } : {}),
        sourceMap: options.sourceMap ?? false,
    }, tsConfig, options.configDir, angularBuilderContext);
    return {
        tsConfig,
        angularBuilderContext,
        angularBuilderOptions,
    };
}
exports.setup = setup;
/**
 * Get Builder Context
 * If storybook is not start by angular builder create dumb BuilderContext
 */
function getBuilderContext(builderContext) {
    return (builderContext ??
        {
            target: { project: 'noop-project', builder: '', options: {} },
            workspaceRoot: process.cwd(),
            getProjectMetadata: () => ({}),
            getTargetOptions: () => ({}),
            logger: new core_1.logging.Logger('Storybook'),
        });
}
/**
 * Get builder options
 * Merge target options from browser target and from storybook options
 */
async function getBuilderOptions(angularBrowserTarget, angularBuilderOptions, tsConfig, configDir, builderContext) {
    /**
     * Get Browser Target options
     */
    let browserTargetOptions = {};
    if (angularBrowserTarget) {
        const browserTarget = (0, architect_1.targetFromTargetString)(angularBrowserTarget);
        browserTargetOptions = await builderContext.getTargetOptions(browserTarget);
    }
    /**
     * Merge target options from browser target options and from storybook options
     */
    const builderOptions = {
        ...browserTargetOptions,
        ...angularBuilderOptions,
        tsConfig: tsConfig ?? (0, find_up_1.sync)('tsconfig.json', { cwd: configDir }) ?? browserTargetOptions.tsConfig,
    };
    node_logger_1.logger.info(`=> Using angular project with "tsConfig:${builderOptions.tsConfig}"`);
    return builderOptions;
}
